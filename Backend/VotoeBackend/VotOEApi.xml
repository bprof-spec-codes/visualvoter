<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VotOEApi</name>
    </assembly>
    <members>
        <member name="T:VotOEApi.Controllers.AllVotesController">
            <summary>
            Controller for managing the votes
            </summary>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.#ctor(Logic.IAllVotesLogic)">
            <summary>
            Creates a new instance of the AllVotes Controller
            </summary>
            <param name="logic">AllVotes logic object (transient)</param>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.GetAllVotes">
            <summary>
            List all voting events
            </summary>
            <returns>A collection of all the votes</returns>
            <remarks>Lists all the past and present votes</remarks>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.GetOneVote(System.Int32)">
            <summary>
            Gets a single AllVotes
            </summary>
            <param name="id">The ID of the AllVotes in question</param>
            <remarks>Returns a single AllVotes, specified by it's ID</remarks>
            <returns></returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.DeleteVote(System.Int32)">
            <summary>
            Deletes a single voting event
            </summary>
            <param name="id">The ID of the AllVotes to be deleted</param>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.CreateVote(Models.AllVotes)">
            <summary>
            Creates a new voting event (AllVotes)
            </summary>
            <param name="vote">AllVotes object, containing the details of the vote to be created</param>
            <returns>Http200 if ok</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.UpdateVote(System.Int32,Models.AllVotes)">
            <summary>
            Updates a single voting event
            </summary>
            <param name="oldId">The original id of the vote to be updated</param>
            <param name="vote">AllVotes object, containing the details of the vote to be updated</param>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.GetAllActiveVotes">
            <summary>
            Returns all the active votes
            </summary>
            <returns>A collection of every active vote</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.GetAllUserAccessibleVotes">
            <summary>
            Lists all votes avaliable to the logged in user
            </summary>
            <returns>A collection of the voting events that are avaliable to the currently authenticated user</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.CloseAVote(System.Int32)">
            <summary>
            Marks a vote as closed
            </summary>
            <param name="id">The id of the vote to be closed</param>
            <returns>HTTP200 if all is good, 400 if not.</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.FinishAVote(System.Int32)">
            <summary>
            Maks a vote as finished
            </summary>
            <param name="id">The id of the vote to be marked</param>
            <returns>HTTP200 if all is good, 400 if not.</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.groupVotes(System.String)">
            <summary>
            Gets all the voting events in the specified group
            </summary>
            <param name="groupName">The name of the group we're looking for</param>
            <returns>A collection of all the voting events matching the criteria</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.participantCount(System.String)">
            <summary>
            Number of unique users within a vote group
            </summary>
            <param name="groupName">The name of the voteGroup we're looking for</param>
            <returns>A collection of all the voting events matching the criteria</returns>
        </member>
        <member name="M:VotOEApi.Controllers.AllVotesController.winCheck(System.Int32)">
            <summary>
            Check if a vote is won.
            </summary>
            <param name="voteID">The id of the vote to be checked</param>
            <remarks>Check if at this moment a vote meets every criteria required to be considered winning. This is not final, just the current state. It can change as m ore votes are submitted, if the vote is still ongoing. </remarks>
            <returns>True if won, false if not</returns>
        </member>
    </members>
</doc>
